@page "/"
@using System

<h3>Blazor Engineer Calculator</h3>

<input @bind="display" style="width: 200px" readonly />
<br />
<button @onclick="MemorySave">MS </button>
<button @onclick="MemoryClear"> MC</button>
<button @onclick="MemoryRecall"> MR</button>
<button @onclick="MemoryPlus"> M+</button>
<button @onclick="MemoryMinus"> M-</button>

<br />
<button @onclick=@(_=>AddNumber("7"))>7</button>
<button @onclick=@(_=>AddNumber("8"))>8</button>
<button @onclick=@(_=>AddNumber("9"))>9</button>
<button @onclick=@(_=>AddOperator("/"))>/</button>
<button @onclick=@(_=>AddOperator("^"))>^</button>
<button @onclick=@(_=>AddOperator("sin"))>sin</button>
<button @onclick=@(_=>AddOperator("ln"))>ln</button>


<br />
<button @onclick=@(_=>AddNumber("4"))>4</button>
<button @onclick=@(_=>AddNumber("5"))>5</button>
<button @onclick=@(_=>AddNumber("6"))>6</button>
<button @onclick=@(_=>AddOperator("*"))>*</button>
<button @onclick=@(_=>AddOperator("!"))>!</button>
<button @onclick=@(_=>AddOperator("cos"))>cos</button>
<button @onclick=@(_=>AddOperator("1/x"))>1/x</button>

<br />
<button @onclick=@(_=>AddNumber("1"))>1</button>
<button @onclick=@(_=>AddNumber("2"))>2</button>
<button @onclick=@(_=>AddNumber("3"))>3</button>
<button @onclick=@(_=>AddOperator("-"))>-</button>
<button @onclick=@(_=>AddOperator("e"))>e</button>
<button @onclick=@(_=>AddOperator("tan"))>tan</button>
<br />
<button @onclick="Clear">C</button>
<button @onclick=@(_=>AddNumber("0"))>0</button>
<button @onclick="Calculate">=</button>
<button @onclick=@(_=>AddOperator("+"))>+</button>
<button @onclick=@(_=>AddOperator("arctan"))>arctan</button>


@code {

    private string display = "";
    private string currentNumber = "";
    private string currentOperator = " ";
    private double result;

    private void AddNumber(string value)
    {
        currentNumber += value;
        display += value;
    }

    private void AddOperator(string value)
    {
        currentOperator = value;
        display += $" {value} ";
    }

    private void Calculate()
    {
        try
        {
            double num1 = Convert.ToDouble(currentNumber.Substring(0, display.IndexOf(currentOperator) - 1));

            switch (currentOperator)
            {
                case "+":
                    double num2 = Convert.ToDouble(display.Substring(display.LastIndexOf(currentOperator) + 2));
                    result = num1 + num2;
                    break;
                case "-":
                    num2 = Convert.ToDouble(display.Substring(display.LastIndexOf(currentOperator) + 2));
                    result = num1 - num2;
                    break;
                case "*":
                    num2 = Convert.ToDouble(display.Substring(display.LastIndexOf(currentOperator) + 2));
                    result = num1 * num2;
                    break;
                case "/":
                    num2 = Convert.ToDouble(display.Substring(display.LastIndexOf(currentOperator) + 2));
                    result = num1 / num2;
                    break;
                case "^":
                    num2 = Convert.ToDouble(display.Substring(display.LastIndexOf(currentOperator) + 2));
                    result = Math.Pow(num1, num2);
                    break;
                case "sin":
                    result = Math.Sin(num1);
                    break;
                case "cos":
                    result = Math.Cos(num1);
                    break;
                case "tan":
                    result = Math.Tan(num1);
                    break;
                case "arctan":
                    result = Math.Atan(num1);
                    break;
                case "ln":
                    result = Math.Log(num1);
                    break;
                case "exp":
                    result = Math.Exp(num1);
                    break;
                case "1/x":
                    result = (1 / num1);
                    break;
                case "!":
                    int numInt = Convert.ToInt16(num1);
                    if (num1 == 0 || num1 == 1)
                        result = 1;
                    else
                    {
                        int res = numInt;
                        for (int i = numInt; i > 1; i--)
                        {
                            res *= i - 1;
                        }
                        result = res;
                    }
                    break;
                default:
                    break;
            }

            display = result.ToString();
            currentNumber = result.ToString();
            currentOperator = " ";
        }
        catch (Exception ex)
        {
            display = ex.Message;
        }
    }

    string memory = "";
    private void MemorySave()
    {
        memory = currentNumber;
    }

    private void MemoryClear()
    {
        memory = "";
    }

    private void MemoryRecall()
    {
        display = memory;
    }
    private void MemoryPlus()
    {
        double currNum = Convert.ToDouble(display);
        display = (Convert.ToDouble(memory) + currNum).ToString();
    }
    private void MemoryMinus()
    {
        string savedVar = display;
        double currNum = Convert.ToDouble(savedVar);
        display = (Convert.ToDouble(memory) - currNum).ToString();
    }

    private void Clear()
    {
        display = "";
        currentNumber = "";
        currentOperator = " ";
        result = 0;
    }
}


